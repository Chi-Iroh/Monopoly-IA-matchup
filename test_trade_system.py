"""
Test complet du syst√®me de trade dans monitor_centralized
Utilise inverse_conversion et mouseDown/mouseUp
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import json
import time
import pygetwindow as gw
import pyautogui
from monitor_centralized import CentralizedMonitor
from src.utils import get_coordinates

def test_trade_with_mock_data():
    """Test du trade avec des donn√©es simul√©es en utilisant CentralizedMonitor"""
    
    print("üéÆ Test du syst√®me de trade")
    print("=" * 60)
    
    # V√©rifier Dolphin
    dolphin_windows = gw.getWindowsWithTitle("Dolphin")
    if not dolphin_windows:
        print("‚ùå Erreur: Dolphin n'est pas ouvert!")
        print("   Veuillez lancer Dolphin avant d'ex√©cuter ce test.")
        return
    
    win = dolphin_windows[0]
    print(f"‚úÖ Fen√™tre Dolphin d√©tect√©e: {win.width}x{win.height} √† ({win.left}, {win.top})")
    
    # Cr√©er une instance r√©elle de CentralizedMonitor
    monitor = CentralizedMonitor("http://localhost:5000")
    
    # Configurer le contexte de jeu
    monitor.game_context = {
        'global': {
            'current_player': 'player1',
            'current_turn': 10
        },
        'players': {
            'player1': {
                'name': 'Player 1',
                'money': 1500,
                'properties': ['Old Kent Road', 'Park Place']
            },
            'player2': {
                'name': 'Player 2',
                'money': 1200,
                'properties': ['Whitechapel Road', 'Boardwalk']
            }
        }
    }
    
    # Donn√©es de trade simul√©es
    trade_data = {
        'player1': {
            'offers': {
                'money': 200,
                'properties': ['Old Kent Road']  # Player1 offre Old Kent Road
            }
        },
        'player2': {
            'offers': {
                'money': 0,
                'properties': ['Whitechapel Road']  # Player2 offre Whitechapel Road
            }
        }
    }
    
    # R√©sultat simul√© avec options
    result = {
        'success': True,
        'decision': 'propose',
        'reason': 'Test de trade',
        'options': [
            {
                'name': 'cancel',
                'bbox': [700, 600, 800, 650]
            },
            {
                'name': 'propose',
                'bbox': [850, 600, 950, 650]
            },
            {
                'name': 'add cash',
                'bbox': [600, 500, 700, 550]
            }
        ]
    }
    
    print("\nüìã Configuration du test:")
    print(f"   Joueur actuel: {monitor.game_context['global']['current_player']}")
    print("   Trade simul√©:")
    print("   - Player 1 offre: Old Kent Road + $200")
    print("   - Player 2 offre: Whitechapel Road")
    print(f"   D√©cision: {result['decision']}")
    
    print("\n‚è±Ô∏è  D√©marrage du test dans 3 secondes...")
    print("   Les clics vont √™tre effectu√©s sur Dolphin")
    
    for i in range(3, 0, -1):
        print(f"   {i}...")
        time.sleep(1)
    
    # Ex√©cuter la fonction de trade
    try:
        monitor._handle_trade_event(trade_data, result, None)
        print("\n‚úÖ Test termin√© avec succ√®s!")
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()

def test_property_coordinates():
    """Test des coordonn√©es des propri√©t√©s depuis MonopolyProperties.json"""
    
    print("\nüìç Test des coordonn√©es des propri√©t√©s")
    print("=" * 60)
    
    # Charger directement depuis MonopolyProperties.json
    properties_file = os.path.join("game_files", "MonopolyProperties.json")
    
    if not os.path.exists(properties_file):
        print(f"‚ùå Fichier non trouv√©: {properties_file}")
        return
        
    with open(properties_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # Propri√©t√©s √† tester
    test_props = ["Old Kent Road", "Whitechapel Road", "Park Place", "Boardwalk"]
    
    print(f"\nüìã Propri√©t√©s trouv√©es dans {properties_file}:")
    for prop in data.get('properties', []):
        if prop.get('name') in test_props:
            name = prop.get('name')
            coords = prop.get('coordinates', {})
            print(f"\n‚úÖ {name}:")
            print(f"   - Relatives: ({coords.get('x_relative', 'N/A')}, {coords.get('y_relative', 'N/A')})")
            print(f"   - Absolues: ({coords.get('x_pixel', 'N/A')}, {coords.get('y_pixel', 'N/A')})")

def test_property_clicks():
    """Test des clics sur propri√©t√©s comme dans _handle_trade_event"""
    
    print("\nüè† Test des clics sur propri√©t√©s")
    print("=" * 60)
    
    dolphin_windows = gw.getWindowsWithTitle("Dolphin")
    if not dolphin_windows:
        print("‚ùå Dolphin non trouv√©")
        return
    
    win = dolphin_windows[0]
    
    # Cr√©er une instance de CentralizedMonitor
    monitor = CentralizedMonitor("http://localhost:5000")
    
    # Propri√©t√©s √† tester (ordre: autre joueur puis joueur actuel)
    properties_to_click = [
        ("Whitechapel Road", "player2"),
        ("Old Kent Road", "player1")
    ]
    
    print(f"\nüìã S√©quence de clics pr√©vue:")
    for prop_name, owner in properties_to_click:
        coords = get_coordinates(prop_name, 'relative')
        if coords:
            print(f"   ‚úÖ {prop_name} ({owner}): coordonn√©es trouv√©es")
        else:
            print(f"   ‚ùå {prop_name} ({owner}): coordonn√©es non trouv√©es")
    
    print("\n‚è±Ô∏è  D√©but des clics dans 3 secondes...")
    for i in range(3, 0, -1):
        print(f"   {i}...")
        time.sleep(1)
    
    # Effectuer les clics comme dans _handle_trade_event
    for prop_name, owner in properties_to_click:
        coords = get_coordinates(prop_name, 'relative')
        if coords:
            rel_x, rel_y = coords
            
            # Transformer les coordonn√©es
            abs_x, abs_y, transformed_x, transformed_y = monitor.transform_coordinates(
                rel_x * win.width, 
                rel_y * win.height, 
                win
            )
            
            if abs_x is not None:
                print(f"\nüè† Propri√©t√©: {prop_name} (appartient √† {owner})")
                print(f"   - Coordonn√©es relatives: ({rel_x:.3f}, {rel_y:.3f})")
                print(f"   - Apr√®s transformation: ({transformed_x}, {transformed_y})")
                
                # Effectuer le clic
                monitor.perform_click(abs_x, abs_y, f"Clic sur {prop_name}")
            else:
                print(f"‚ùå Erreur de transformation pour {prop_name}")
        else:
            print(f"‚ö†Ô∏è Coordonn√©es introuvables pour {prop_name}")
    
    # Test d'un clic sur bouton avec offset
    print("\nüìã Test du clic sur bouton avec offset")
    button_x = win.left + win.width // 2
    button_y = win.top + win.height * 0.6  # 60% de la hauteur
    
    monitor.perform_click(button_x, button_y, "Clic sur bouton 'Propose'", y_offset=30)
    
    print("\n‚úÖ Test termin√©!")

def test_single_click():
    """Test d'un clic unique avec transformation en utilisant CentralizedMonitor"""
    
    print("\nüéØ Test de clic unique avec inverse_conversion")
    print("=" * 60)
    
    dolphin_windows = gw.getWindowsWithTitle("Dolphin")
    if not dolphin_windows:
        print("‚ùå Dolphin non trouv√©")
        return
    
    win = dolphin_windows[0]
    
    # Cr√©er une instance r√©elle de CentralizedMonitor
    monitor = CentralizedMonitor("http://localhost:5000")
    
    # Coordonn√©es de test (centre de l'√©cran)
    rel_x, rel_y = 0.5, 0.5
    
    print(f"\nüìã Test de clic au centre:")
    print(f"   Fen√™tre: {win.width}x{win.height} √† ({win.left}, {win.top})")
    print(f"   Coordonn√©es relatives: ({rel_x}, {rel_y})")
    
    # Calculer les coordonn√©es en pixels
    pixel_x = rel_x * win.width
    pixel_y = rel_y * win.height
    
    # Utiliser transform_coordinates de CentralizedMonitor
    abs_x, abs_y, transformed_x, transformed_y = monitor.transform_coordinates(pixel_x, pixel_y, win)
    
    if abs_x is not None:
        print(f"   Apr√®s transformation: ({transformed_x}, {transformed_y})")
        print(f"   Position absolue: ({abs_x}, {abs_y})")
        
        print("\n‚è±Ô∏è  Clic dans 2 secondes...")
        time.sleep(2)
        
        # Utiliser perform_click de CentralizedMonitor
        monitor.perform_click(abs_x, abs_y, "Test de clic au centre")
        
        print("‚úÖ Clic effectu√©!")
    else:
        print("‚ùå Erreur de transformation")

if __name__ == "__main__":
    print("üß™ Test du syst√®me de trade Monopoly")
    print("=====================================\n")
    
    print("Options:")
    print("1. Test complet du trade avec donn√©es simul√©es")
    print("2. Test des coordonn√©es des propri√©t√©s (depuis JSON)")
    print("3. Test des clics sur propri√©t√©s (simule un trade)")
    print("4. Test d'un clic unique au centre")
    print("5. Tous les tests")
    
    choice = input("\nVotre choix (1-5): ").strip()
    
    if choice == "1":
        test_trade_with_mock_data()
    elif choice == "2":
        test_property_coordinates()
    elif choice == "3":
        test_property_clicks()
    elif choice == "4":
        test_single_click()
    elif choice == "5":
        test_property_coordinates()
        print("\n" + "=" * 60)
        test_property_clicks()
        print("\n" + "=" * 60)
        test_single_click()
        print("\n" + "=" * 60)
        test_trade_with_mock_data()
    else:
        print("‚ùå Choix invalide")