#!/usr/bin/env python3
"""
Test complet pour v√©rifier la lecture du nombre de maisons sur les propri√©t√©s
"""

import dolphin_memory_engine as dme
import time
import sys
from src.utils.property_helpers import (
    get_property_house_count, 
    get_all_properties_house_count,
    has_hotel,
    can_build_house,
    can_build_hotel
)
from src.core.property import Property

def wait_for_dolphin():
    """Attend que Dolphin soit connect√©"""
    print("‚è≥ En attente de connexion √† Dolphin...")
    
    # Essayer de se connecter directement
    try:
        dme.hook()
    except Exception as e:
        print(f"   Erreur lors de la connexion: {e}")
    
    # V√©rifier si connect√©
    if dme.is_hooked():
        print("‚úÖ Connect√© √† Dolphin!")
        return True
    
    # Si pas connect√©, essayer plusieurs fois
    attempts = 0
    while attempts < 10:
        try:
            dme.hook()
            time.sleep(0.5)  # Attendre un peu
            if dme.is_hooked():
                print("‚úÖ Connect√© √† Dolphin!")
                return True
        except:
            pass
        attempts += 1
        print(f"   Tentative {attempts}/10...")
        time.sleep(1)
    
    return False

def test_single_property():
    """Test de lecture pour une propri√©t√© sp√©cifique"""
    print("\n" + "="*60)
    print("TEST 1: Lecture d'une propri√©t√© sp√©cifique")
    print("="*60 + "\n")
    
    test_properties = [
        "Old Kent Road",
        "Whitechapel Road", 
        "Park Lane",
        "Mayfair",
        "Oxford Street",
        "Bond Street"
    ]
    
    for property_name in test_properties:
        print(f"\nüè† Test pour: {property_name}")
        print("-" * 40)
        
        # R√©cup√©rer le nombre de maisons
        house_count = get_property_house_count(property_name)
        
        if house_count is not None:
            print(f"‚úÖ Nombre de maisons/h√¥tel: {house_count}")
            
            # Afficher l'√©tat
            if house_count == 0:
                print("   ‚Üí Aucune construction")
            elif house_count == 1:
                print("   ‚Üí 1 maison üè†")
            elif house_count <= 4:
                print(f"   ‚Üí {house_count} maisons üè†" * house_count)
            elif house_count == 5:
                print("   ‚Üí 1 h√¥tel üè®")
            
            # Tester les fonctions helper
            print(f"   ‚Üí A un h√¥tel? {has_hotel(property_name)}")
            print(f"   ‚Üí Peut construire une maison? {can_build_house(property_name)}")
            print(f"   ‚Üí Peut construire un h√¥tel? {can_build_hotel(property_name)}")
        else:
            print("‚ùå Erreur: Impossible de lire cette propri√©t√©")

def test_all_properties():
    """Test de lecture pour toutes les propri√©t√©s"""
    print("\n" + "="*60)
    print("TEST 2: Lecture de toutes les propri√©t√©s")
    print("="*60 + "\n")
    
    all_properties = get_all_properties_house_count()
    
    if not all_properties:
        print("‚ùå Erreur: Impossible de r√©cup√©rer les propri√©t√©s")
        return
    
    # Grouper par couleur (approximatif bas√© sur l'ordre)
    color_groups = {
        "Marron": ["Old Kent Road", "Whitechapel Road"],
        "Bleu clair": ["The Angel Islington", "Euston Road", "Pentonville Road"],
        "Rose": ["Pall Mall", "Whitehall", "Northumberland Avenue"],
        "Orange": ["Bow Street", "Marlborough Street", "Vine Street"],
        "Rouge": ["Strand", "Fleet Street", "Trafalgar Square"],
        "Jaune": ["Leicester Square", "Coventry Street", "Piccadilly"],
        "Vert": ["Regent Street", "Oxford Street", "Bond Street"],
        "Bleu fonc√©": ["Park Lane", "Mayfair"]
    }
    
    total_houses = 0
    total_hotels = 0
    
    for color, properties in color_groups.items():
        print(f"\n{color}:")
        print("-" * 40)
        
        for prop in properties:
            if prop in all_properties:
                count = all_properties[prop]
                
                # Symboles visuels
                if count == 0:
                    visual = "‚¨ú"
                elif count <= 4:
                    visual = "üè†" * count
                    total_houses += count
                else:  # count == 5
                    visual = "üè®"
                    total_hotels += 1
                
                print(f"  {prop:<30} [{count}] {visual}")
    
    print("\n" + "="*60)
    print("R√âSUM√â:")
    print(f"  Total maisons: {total_houses} üè†")
    print(f"  Total h√¥tels: {total_hotels} üè®")
    print(f"  Valeur totale en constructions: {total_houses + total_hotels * 5}")

def test_memory_direct():
    """Test direct de lecture m√©moire"""
    print("\n" + "="*60)
    print("TEST 3: Lecture directe de la m√©moire")
    print("="*60 + "\n")
    
    # Test avec quelques adresses directement
    test_addresses = [
        ("Old Kent Road", "0x9303E327"),
        ("Park Lane", "0x9303F437"),
        ("Mayfair", "0x9303F4DF")
    ]
    
    for prop_name, address in test_addresses:
        try:
            # Utiliser directement Property.get_house_count_for_property
            count_method = Property.get_house_count_for_property(prop_name)
            
            # Lire directement l'adresse
            from src.core.memory_reader import MemoryReader
            count_direct = MemoryReader.get_byte(address)
            
            print(f"{prop_name}:")
            print(f"  ‚Üí Via m√©thode: {count_method}")
            print(f"  ‚Üí Lecture directe: {count_direct}")
            print(f"  ‚Üí Match: {'‚úÖ' if count_method == count_direct else '‚ùå'}")
            
        except Exception as e:
            print(f"‚ùå Erreur pour {prop_name}: {e}")

def main():
    """Fonction principale"""
    print("\nüé≤ TEST DE LECTURE DES MAISONS/H√îTELS MONOPOLY üé≤")
    print("="*60)
    
    # Se connecter √† Dolphin
    if not wait_for_dolphin():
        print("\n‚ùå Impossible de se connecter √† Dolphin!")
        print("Assurez-vous que:")
        print("  1. Dolphin est lanc√©")
        print("  2. Monopoly est en cours d'ex√©cution")
        print("  3. Une partie est charg√©e")
        sys.exit(1)
    
    print("\n‚úÖ Connexion √©tablie! D√©but des tests...\n")
    time.sleep(1)
    
    try:
        # Ex√©cuter les tests
        test_single_property()
        input("\nüìù Appuyez sur Entr√©e pour continuer avec le test suivant...")
        
        test_all_properties()
        input("\nüìù Appuyez sur Entr√©e pour continuer avec le test suivant...")
        
        test_memory_direct()
        
        print("\n" + "="*60)
        print("‚úÖ TOUS LES TESTS TERMIN√âS!")
        print("="*60)
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Tests interrompus par l'utilisateur")
    except Exception as e:
        print(f"\n\n‚ùå Erreur pendant les tests: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()